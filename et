[33mcommit 7fc8721f87f171f6c1ef97eee1d7a10db6507554[m
Author: mat rowlands <mat.rowlands@justgiving.com>
Date:   Sat Aug 15 12:21:52 2015 +0100

    fixed display code

[1mdiff --git a/mpc.py b/mpc.py[m
[1mindex e400a1f..0def88a 100755[m
[1m--- a/mpc.py[m
[1m+++ b/mpc.py[m
[36m@@ -75,6 +75,10 @@[m [mch.setFormatter(formatter)[m
 ch.setLevel(debugLevel)[m
 logger.addHandler(ch)[m
 [m
[32m+[m[32mdef setDebugLevel(val):[m
[32m+[m[32m    logger.setLevel(val)[m
[32m+[m[32m    ch.setLevel(val)[m
[32m+[m
 def incrementMidiChannel():[m
     global my_channel, is_dirty[m
     my_channel += 1[m
[36m@@ -89,7 +93,7 @@[m [mdef decrementMidiChannel():[m
     if ( my_channel < 1 ):[m
         my_channel = 16[m
     is_dirty = True[m
[31m-    display(my_channel)[m
[32m+[m[32m    displayChannel( my_channel )[m
 [m
 def setMidiChannel(channel):[m
     global my_channel, is_dirty[m
[36m@@ -100,27 +104,47 @@[m [mdef setMidiChannel(channel):[m
         if ( my_channel > 16 ):[m
             my_channel = 16[m
         is_dirty = True[m
[31m-        display(my_channel)[m
[31m-[m
[31m-def setDebugLevel(val):[m
[31m-    logger.setLevel(val)[m
[31m-    ch.setLevel(val)[m
[32m+[m[32m        displayChannel( my_channel )[m
 [m
 def saveConfig():[m
     global my_channel[m
[31m-    logger.info("saving fresh config")[m
[31m-    raw_display("SAUE")[m
[31m-    f = open('mpc.cfg','w')[m
[31m-    f.write(str(my_channel))[m
[32m+[m[32m    logger.info( "saving fresh config" )[m
[32m+[m[32m    raw_display( "SAUE" )[m
[32m+[m[32m    f = open( 'mpc.cfg','w' )[m
[32m+[m[32m    f.write( str(my_channel) )[m
     f.close[m
     time.sleep(0.5)[m
     is_dirty = False[m
[31m-    display(my_channel)[m
[32m+[m[32m    displayChannel( my_channel )[m
 [m
[31m-def auto_off(drum):[m
[31m-    time.sleep(AutoOffSleepMS)[m
[31m-    logger.info("auto_off killing GPIO " + str(drum["gpio"]))[m
[31m-    GPIO.output(drum["gpio"], False)[m
[32m+[m[32mdef animate(longString):[m
[32m+[m[32m    logger.info( "writing :: " + longString )[m
[32m+[m[32m    strlen = len(longString) - 4[m
[32m+[m[32m    clearDisplay()[m
[32m+[m[32m    for x in range(0, strlen - 1):[m
[32m+[m[32m        raw_display( longString[x:x+4] )[m
[32m+[m[32m        time.sleep(0.2)[m
[32m+[m
[32m+[m[32mdef displayChannel(channel):[m
[32m+[m[32m    logger.info( "midi channel set to :: " + str(channel).zfill(2) )[m
[32m+[m[32m    clearDisplay()[m
[32m+[m[32m    raw_display( "ch" + str(channel).zfill(2) )[m
[32m+[m
[32m+[m[32mdef clearDisplay():[m
[32m+[m[32m    mybus.write_byte(0x71, 0x76)[m
[32m+[m
[32m+[m[32mdef raw_display(s):[m
[32m+[m[32m    global mybus[m
[32m+[m[32m    # position cursor at 0, append the string[m
[32m+[m[32m    for k in '\x79\x00' + s:[m
[32m+[m[32m        try:[m
[32m+[m[32m            # 0x71 is the hardware address of the lcd[m
[32m+[m[32m            mybus.write_byte(0x71, ord(k))[m
[32m+[m[32m        except:[m
[32m+[m[32m            try:[m
[32m+[m[32m                mybus.write_byte(0x71, ord(k))[m
[32m+[m[32m            except:[m
[32m+[m[32m                pass[m
 [m
 def callback(message, time_stamp):[m
 [m
[36m@@ -131,27 +155,27 @@[m [mdef callback(message, time_stamp):[m
 [m
     if ( logger.isEnabledFor(logging.DEBUG) ):[m
         message_text = ", ".join(map(str, message))[m
[31m-        logger.debug("received :: (@ " + str(time_stamp) + ") == " + message_text)[m
[32m+[m[32m        logger.debug( "received :: (@ " + str(time_stamp) + ") == " + message_text )[m
 [m
     if ( in_sys_exclusive ):[m
[31m-        logger.debug("handling sysex stream")[m
[32m+[m[32m        logger.debug( "handling sysex stream" )[m
         if ( message[0] == 0xF7 ):[m
[31m-            logger.info("at the end of the message :: " + str(sysex_buffer))[m
[32m+[m[32m            logger.info( "at the end of the message :: " + str(sysex_buffer) )[m
             in_sys_exclusive = False[m
         else:[m
[31m-            logger.debug("appending message part :: " + str(message))[m
[32m+[m[32m            logger.debug( "appending message part :: " + str(message) )[m
             sysex_buffer.append( message )[m
 [m
     #if ( (message[0] - 0x90) == (my_channel - 1) ):[m
     if ( (message[0] == c.NOTE_ON | (my_channel - 1)) ):[m
[31m-        logger.debug("it's a 'note on' event on our midi channel")[m
[32m+[m[32m        logger.debug( "it's a 'note on' event on our midi channel" )[m
 [m
         for drum_key in drum_map:[m
[31m-            if (drum_map[drum_key]["midi_key"] == message[1]):[m
[31m-                logger.info("let's hit the " + drum_key + " on GPIO " + str(drum_map[drum_key]["gpio"]))[m
[32m+[m[32m            if ( drum_map[drum_key]["midi_key"] == message[1] ):[m
[32m+[m[32m                logger.info( "let's hit the " + drum_key + " on GPIO " + str(drum_map[drum_key]["gpio"]) )[m
 [m
                 # light up the pin[m
[31m-                GPIO.output(drum_map[drum_key]["gpio"], True)[m
[32m+[m[32m                GPIO.output( drum_map[drum_key]["gpio"], True )[m
 [m
                 # and then do an auto off[m
                 if ( SendAutoOff ):[m
[36m@@ -160,62 +184,45 @@[m [mdef callback(message, time_stamp):[m
                 break[m
 [m
     elif ( (message[0] == c.NOTE_OFF | (my_channel - 1)) ):[m
[31m-        logger.debug("it's a 'note off' event on our channel")[m
[32m+[m[32m        logger.debug( "it's a 'note off' event on our channel" )[m
 [m
         for drum_key in drum_map:[m
[31m-            if (drum_map[drum_key]["midi_key"] == message[1]):[m
[31m-                logger.info("let's stop that " + drum_key)[m
[32m+[m[32m            if ( drum_map[drum_key]["midi_key"] == message[1] ):[m
[32m+[m[32m                logger.info( "let's stop that " + drum_key )[m
                 break[m
 [m
     elif ( message[0] == 0xF2 ):[m
[31m-        logger.debug("song position counter")[m
[32m+[m[32m        logger.debug( "song position counter" )[m
         #message[1] = low[m
         #message[2] = hi[m
 [m
     elif ( message[0] == 0xF8 ):[m
[31m-        logger.debug("ping ... timing message")[m
[32m+[m[32m        logger.debug( "ping ... timing message" )[m
 [m
     elif ( message[0] == 0xFA ):[m
[31m-        logger.info("song start")[m
[32m+[m[32m        logger.info( "song start" )[m
 [m
     elif ( message[0] == 0xFB ):[m
[31m-        logger.info("song continue")[m
[32m+[m[32m        logger.info( "song continue" )[m
 [m
     elif ( message[0] == 0xFC ):[m
[31m-        logger.info("song stop")[m
[32m+[m[32m        logger.info( "song stop" )[m
 [m
     elif ( message[0] == 0xFF ):[m
[31m-        logger.info("down tools, it's a reset")[m
[32m+[m[32m        logger.info( "down tools, it's a reset" )[m
 [m
     elif ( message[0] == 0xF0 ):[m
[31m-        logger.debug("potential timecode :: " + str(message))[m
[32m+[m[32m        logger.debug( "potential timecode :: " + str(message) )[m
         #in_sys_exclusive = True[m
         #sysex_buffer = [][m
 [m
     else:[m
[31m-        logger.debug("unknown message :: " + str(message))[m
[31m-[m
[31m-def animate(longString):[m
[31m-    strlen = len(longString) - 4[m
[31m-    for x in range(0, strlen - 1):[m
[31m-        raw_display( longString[x:x+4] )[m
[31m-        time.sleep(0.2)[m
[32m+[m[32m        logger.debug( "unknown message :: " + str(message) )[m
 [m
[31m-def display(channel):[m
[31m-    logger.info("midi channel set to :: " + str(channel).zfill(2))[m
[31m-    raw_display("ch" + str(channel).zfill(2))[m
[31m-[m
[31m-def raw_display(s):[m
[31m-    global mybus[m
[31m-    for k in '\x76\x79\x00' + s:     # position cursor at 0[m
[31m-        try:[m
[31m-            bus.write_byte(0x71, ord(k))[m
[31m-        except:[m
[31m-            try:[m
[31m-                bus.write_byte(0x71, ord(k))[m
[31m-            except:[m
[31m-                pass[m
[31m-        time.sleep(0.002)[m
[32m+[m[32mdef auto_off(drum):[m
[32m+[m[32m    time.sleep(AutoOffSleepMS)[m
[32m+[m[32m    logger.info( "auto_off killing GPIO " + str(drum["gpio"]) )[m
[32m+[m[32m    GPIO.output(drum["gpio"], False)[m
 [m
 def initialise():[m
     global my_channel, initialised[m
[36m@@ -224,7 +231,7 @@[m [mdef initialise():[m
         logger.info("setting pin " + str(drum_map[drum_key]["gpio"]) + " up for output")[m
         GPIO.setup(drum_map[drum_key]["gpio"], GPIO.OUT)[m
 [m
[31m-    logger.info("Searching for Midi in ports ... ")[m
[32m+[m[32m    logger.info("searching for Midi in ports ... ")[m
     midi_in = rtmidi.MidiIn()[m
 [m
     has_ports = False[m
[36m@@ -233,12 +240,13 @@[m [mdef initialise():[m
         has_ports = True[m
 [m
     if ( not has_ports ):[m
[31m-        logger.info("No midi in ports found, quitting")[m
[32m+[m[32m        logger.info("no midi in ports found, quitting")[m
         exit (1)[m
     else:[m
[31m-        logger.info("Opening first port")[m
[32m+[m[32m        logger.info("opening first port")[m
         midi_in.callback = callback[m
[31m-        midi_in.ignore_types(False, False, True)[m
[32m+[m[32m        # skip any of sysex, time and sensitivity aka. aftertouch[m
[32m+[m[32m        midi_in.ignore_types(True, True, True)[m
         midi_in.open_port( 0 )[m
 [m
     if ( os.path.isfile('mpc.cfg') ):[m
[36m@@ -253,12 +261,13 @@[m [mdef initialise():[m
     ButtonsThread.start()[m
 [m
     animate("    ----init----nnidi2nnpc----    ")[m
[31m-    display( my_channel )[m
[32m+[m[32m    displayChannel( my_channel )[m
     initialised = True[m
 [m
 def destroy():[m
     global initialised, midi_in, is_dirty, my_channel[m
[31m-    animate("----power off----    ")[m
[32m+[m[32m    animate("----pouuering off----")[m
[32m+[m[32m    clearDisplay()[m
     initialised = False[m
     if ( midi_in != None ):[m
         midi_in.close_port()[m
[36m@@ -297,7 +306,7 @@[m [mdef Buttons():[m
 if __name__ == "__main__":[m
 [m
     try:[m
[31m-        print ("initialsing")[m
[32m+[m[32m        print ("initialising")[m
         initialise()[m
         print("running engine ... [ctrl-c to exit]")[m
         sys.stdout.flush()[m
[1mdiff --git a/mpc.pyc b/mpc.pyc[m
[1mindex 113e405..e647691 100644[m
Binary files a/mpc.pyc and b/mpc.pyc differ
